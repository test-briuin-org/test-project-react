name: CI/CD Pipeline for React Project

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options:
          - test
          - development
          - staging
          - production

env:
  NODE_VERSION: "20.x"

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Check if package-lock.json Changed
        id: check-lockfile
        run: |
          if git diff HEAD^ HEAD -- package-lock.json | grep -q .; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if node_modules Exists
        id: check-node-modules
        run: |
          if [ -d "node_modules" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Dependencies
        if: steps.check-lockfile.outputs.changed == 'true' || steps.check-node-modules.outputs.exists == 'false'
        run: npm ci

  build-and-test:
    needs: install-dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [test, development, staging, production]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Check if node_modules Exists
        id: check-node-modules
        run: |
          if [ -d "node_modules" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Dependencies
        if: steps.check-lockfile.outputs.changed == 'true' || steps.check-node-modules.outputs.exists == 'false'
        run: npm ci

      - name: Build for ${{ matrix.env }}
        env:
          VITE_APP_ENV: ${{ matrix.env }}
          VITE_APP_API_URL: ${{ vars[format('API_URL_{0}', matrix.env)] }}
        run: |
          if [ "${{ matrix.env }}" = "development" ]; then
            npm run build:stagingdev
          elif [ "${{ matrix.env }}" = "staging" ]; then
            npm run build:staging
          elif [ "${{ matrix.env }}" = "test" ]; then
            npm run build:test
          elif [ "${{ matrix.env }}" = "production" ]; then
            npm run build:prod
          else
            npm run build
          fi

      - name: Run SAST
        if: matrix.env == 'test'
        run: echo "RUN SAST"

      - name: Run Unit Tests
        if: matrix.env == 'test'
        run: echo "RUN UNIT TESTS"

      - name: Run Cypress Tests
        if: matrix.env == 'test'
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          start: npm run dev
          wait-on: "http://localhost:3000"
          config: baseUrl=http://localhost:3000
        env:
          CYPRESS_ENV: ${{ matrix.env }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.env }}
          path: dist/
          retention-days: 5

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    permissions:
      contents: write
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.event.inputs.environment }}
          path: dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: dist